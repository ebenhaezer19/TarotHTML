<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tarot Card Game</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Bungee+Spice&family=Rubik+Scribble&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <!-- Video latar belakang -->
  <video id="background-video" autoplay loop muted>
    <source src="Galaxy2.mp4" type="video/mp4">
    Your browser does not support the video tag.
  </video>
  <audio id="welcomeAudio" src="Welcome.mp3"></audio>

  <div style="margin-top:0.5em;" class="slideshow-container">
    <div class="slide fade">
      <div class="text">Welcome to be a part of Tarot CIT...</div>
    </div>
    <div class="slide fade">
      <div class="text">We hope you enjoy this game.</div>
    </div>
  </div>
  
  <img id="muteIcon" src="Speaker-on.png" onclick="toggleMute()" class="mute-button" style="position: relative; top: 350px; left: 100px;">

  <audio id="backgroundMusic" autoplay loop>
    <source src="Poker.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
  </audio>
  <audio id="welcomeAudio" src="Welcome.mp3"></audio>
  <div class="dropdown" onmouseover="showDropdown()" onmouseout="hideDropdown()">
    <img src="BigNavbarTitle.png" alt="Dropdown" class="dropbtn">
    <div class="dropdown-content" id="myDropdown" onmouseover="cancelHide()"><br><br>
      <a href="#">About me</a>
      <a href="tarot.html">Restart</a>
     <a href="/Home.html">Quit</a>
    </div>
  </div>
  
  <script src="script.js"></script>
  <div class="maincontainer" id="cardContainer">
    <!-- Tarot Cards will be added here dynamically -->
  </div>

  <div class="opened-cards" id="openedCards" style="margin-top: 650px; padding-top: 0px;">
    <!-- Opened cards will be displayed here -->
  </div>

  <!-- Section untuk menampilkan informasi tambahan mengenai kartu yang dibalik -->
  <div id="cardInfo" style="margin-top:20px;">
    <h3>Informasi Kartu</h3>
    <p id="cardName">Nama Kartu:</p>
    <p id="cardDescription">Deskripsi Singkat:</p>
  </div>

  <!-- Tombol shuffle dan instruksi tetap dipertahankan -->

  <div id="instructions" style="text-align: center; color: white;  font-family: 'Bungee Spice', sans-serif; /* Ganti dengan font menarik Anda */
  font-size: 24px;
  transform: translate(-50%, -50%);
  color: white;
  margin-left: 50%;
  padding-top: 140px;">
    <p>Silakan tekan tombol Shuffle untuk mengulangi permainan setelah membuka 3 kartu.</p>
  </div>

  <div class="button-custom">
    <button class="button" style="margin-bottom: 10em; margin-top: -50em;" onclick="shuffleCards()">Shuffle</button>
    <audio id="shuffleSound" src="shuffle.mp3"></audio>
  </div>
  
  <script>
document.addEventListener("DOMContentLoaded", function() {
  // Dapatkan elemen audio
  const welcomeAudio = document.getElementById("welcomeAudio");

  // Putar audio selamat datang saat halaman dimuat
  welcomeAudio.play();
});

let hoverTimeout; // Variabel untuk menyimpan timeout dari efek hover
let initialCardPositions = []; // Variabel untuk menyimpan posisi awal kartu
let openCount = 0; // Variabel untuk menghitung jumlah kartu yang sudah dibuka
let openedCards = []; // Variabel untuk menyimpan kartu yang sudah dibuka

const cardDescriptions = {
  "The Star.png": "Description for The Star",
  "Joker.png": "Description for Joker",
  "The Fool.png": "Description for The Fool",
  "Death.png": "Description for Death",
  "The World.png": "Description for The World",
  "The Devil.png": "Description for The Devil",
  "Judgement.png": "Description for Judgement",
  "The Sun.png": "Description for The Sun"
};

const cardNames = [
  "The Star.png",
  "Joker.png",
  "The Fool.png",
  "Death.png",
  "The World.png",
  "The Devil.png",
  "Judgement.png",
  "The Sun.png"
];

function displayCardDescription(cardName) {
  const descriptionContainer = document.getElementById('cardDescription');
  descriptionContainer.innerText = cardDescriptions[cardName] || "Deskripsi tidak tersedia";
}

function flipCard(card) {
  let flipSound; // Variabel untuk menyimpan file suara

  // Memeriksa apakah sudah dibuka lebih dari 3 kartu
  if (openCount > 2) {
    flipSound = new Audio('gagal.mp3'); // File suara untuk efek gagal
  } else {
    flipSound = new Audio('Flip.mp3'); // File suara untuk efek flip
  }

  // Memainkan suara flip
  flipSound.play();

  // Menentukan kartu yang dibalik
  const cardName = card.querySelector('.front img').src;

  // Memeriksa apakah kartu yang dibalik adalah salah satu dari lima kartu yang diinginkan
  const targetCards = [
    "The Star.png",
    "Joker.png",
    "The Fool.png",
    "Death.png",
    "The World.png",
    "The Devil.png",
    "Judgement.png",
    "The Sun.png"
  ];

  // Objek atau daftar yang memetakan nama file kartu ke file audio yang sesuai
  const cardAudioMap = {
    "The Star.png": "The Star.mp3",
    "Joker.png": "Joker.mp3",
    "The Fool.png": "The Fool.mp3",
    "Death.png": "Death.mp3",
    "The World.png": "The World.mp3",
    "The Devil.png": "The Devil.mp3",
    "Judgement.png": "Judgement.mp3",
    "The Sun.png": "The Sun.mp3"
  };

  if (targetCards.includes(normalizeFileName(cardName))) {
    // Memeriksa apakah kartu yang dibuka ada di dalam objek map
    if (cardAudioMap.hasOwnProperty(normalizeFileName(cardName))) {
      // Mendapatkan nama file audio yang sesuai
      const audioFileName = cardAudioMap[normalizeFileName(cardName)];
      // Memainkan audio yang sesuai
      const audio = new Audio(audioFileName);
      audio.play();
    }
  }

  // Animasi flip kartu
  const cardElement = card.querySelector('.card');

  // Cek apakah kartu sudah dibuka atau tidak
  if (!cardElement.classList.contains('flipped')) {
    // Jika kartu belum dibuka, tambahkan 1 pada hitungan kartu yang sudah dibuka
    openCount++;
  }

  // Cek apakah sudah dibuka 3 kartu atau belum
  if (openCount <= 3) {
    // Jika masih kurang dari atau sama dengan 3 kartu, izinkan untuk membalik kartu
    cardElement.classList.toggle('flipped');

    // Tambahkan kartu ke dalam array kartu yang dibuka
    if (cardElement.classList.contains('flipped')) {
      const openedCardName = card.querySelector('.front img').src;
      openedCards.push(openedCardName);
      displayOpenedCards(openedCards);
      
      // Tampilkan deskripsi kartu yang dibalik
      displayCardDescription(openedCardName);
    }
  } else {
    // Jika sudah membuka 3 kartu, maka tidak ada yang dapat dilakukan
    console.log("Anda sudah membuka 3 kartu, silakan klik tombol Shuffle untuk mengacak kembali kartu.");
  }
}

function blurOtherElements(card) {
  const elementsToBlur = document.querySelectorAll('.thecard:not(.popup)');
  elementsToBlur.forEach(element => {
    if (element !== card && !element.querySelector('.card').classList.contains('flipped')) {
      element.classList.add('blurred');
    }
  });
}

function unblurOtherElements() {
  const elementsToUnblur = document.querySelectorAll('.thecard:not(.popup)');
  elementsToUnblur.forEach(element => {
    element.classList.remove('blurred');
  });
}

function handleMouseEnter(card) {
  if (card.querySelector('.card').classList.contains('flipped')) {
    card.classList.add('popup');
    blurOtherElements(card);
  }
}

function handleMouseLeave(card) {
  card.classList.remove('popup');
  unblurOtherElements();
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

var shuffleAudio = document.getElementById("shuffleSound");

function shuffleCards() {
  shuffleAudio.pause(); // Hentikan pemutaran jika sedang berlangsung
  shuffleAudio.currentTime = 0; // Set ulang waktu audio ke awal
  shuffleAudio.play();

  // Set timeout untuk menghentikan pemutaran setelah 3 detik
  setTimeout(function() {
    shuffleAudio.pause();
  }, 1000);

  const cardContainer = document.getElementById('cardContainer');
  openCount = 0; // Reset jumlah kartu yang sudah dibuka ke 0
  openedCards = []; // Kosongkan array kartu yang sudah dibuka

  // Kosongkan container kartu yang sudah dibuka
  const openedCardsContainer = document.getElementById('openedCards');
  openedCardsContainer.innerHTML = '';

  // Kosongkan informasi kartu yang sudah dibuka
  const cardInfo = document.getElementById('cardInfo');
  cardInfo.innerHTML = `
    <h3>Informasi Kartu</h3>
    <p id="cardName">Nama Kartu:</p>
    <p id="cardDescription">Deskripsi Singkat:</p>
  `;

  // Hapus semua kartu yang ada
  cardContainer.innerHTML = '';

  // Buat ulang kartu-kartu dengan urutan yang diacak
  const shuffledCards = shuffle(cardNames).slice(0, 15); // Ambil 15 kartu pertama dari array yang diacak
  for (let i = 0; i < shuffledCards.length; i++) {
    const cardElement = document.createElement('div');
    cardElement.classList.add('thecard');
    cardElement.onclick = function () {
      flipCard(this);
    };
    cardElement.onmouseenter = function () {
      handleMouseEnter(this);
    };
    cardElement.onmouseleave = function () {
      handleMouseLeave(this);
    };
    cardElement.style.order = i; // Set posisi awal kartu
    const cardInnerHtml = `
      <div class="card" style="margin-top: 650px;">
        <div class="face front"><img src="${shuffledCards[i]}" alt="Front of Card ${i + 1}"></div>
        <div class="face back"><img src="Tarot Mayor Arcana/Tarot Back Card!.png" alt="Back of Card ${i + 1}"></div>
      </div>
    `;
    cardElement.innerHTML = cardInnerHtml;
    cardContainer.appendChild(cardElement);

    // Tambahkan kelas animasi untuk efek shuffle
    setTimeout(() => {
      cardElement.classList.add('shuffle-animation');
    }, i * 50); // Atur penundaan untuk efek shuffle
  }
}

function resetGame() {
  shuffleCards();
  const openedCardsContainer = document.getElementById('openedCards');
  openedCardsContainer.innerHTML = ''; // Kosongkan container kartu yang sudah dibuka
}

// Panggil fungsi shuffleCards() saat halaman dimuat pertama kali
window.onload = shuffleCards;

// Simpan posisi awal kartu saat pertama kali dibuat
const cardContainer = document.getElementById('cardContainer');
const cards = cardContainer.querySelectorAll('.thecard');
cards.forEach((card, index) => {
  initialCardPositions.push(parseInt(card.style.order || index));
});

function normalizeFileName(fileName) {
  // Menghapus path dari nama file
  const fileNameWithoutPath = fileName.split('/').pop();
  // Mengonversi URI yang dikodekan kembali menjadi string yang valid
  return decodeURIComponent(fileNameWithoutPath);
}

function displayOpenedCards(cards) {
  const openedCardsContainer = document.getElementById('openedCards');
  openedCardsContainer.innerHTML = ''; // Kosongkan container terlebih dahulu
  
  cards.forEach(cardName => {
    const openedCardElement = document.createElement('div');
    openedCardElement.classList.add('opened-card');
    const cardImage = document.createElement('img');
    cardImage.src = cardName;
    openedCardElement.appendChild(cardImage);
    openedCardsContainer.appendChild(openedCardElement);
  });

  // Menampilkan informasi tambahan mengenai kartu yang dibalik
  const cardInfo = document.getElementById('cardInfo');
  const lastOpenedCard = normalizeFileName(cards[cards.length - 1]); // Normalize file name
  const cardDescription = cardDescriptions[lastOpenedCard];
  cardInfo.innerHTML = `
    <h3>Informasi Kartu</h3>
    <p>Nama Kartu: ${lastOpenedCard}</p>
    <p>Deskripsi Singkat: ${cardDescription}</p>
  `;
}

function toggleMute() {
  const backgroundMusic = document.getElementById("backgroundMusic");;
  const muteIcon = document.getElementById("muteIcon");

  // Toggle mute for all audio elements
  [backgroundMusic, welcomeAudio, shuffleSound].forEach(audio => {
    if (audio.muted) {
      audio.muted = false;
      muteIcon.src = "Speaker-on.png";
    } else {
      audio.muted = true;
      muteIcon.src = "Speaker-mute.png";
    }
  });
}
  </script>
</body>
</html>
